[target.wasm32-unknown-unknown]
rustflags = ["--cfg", "getrandom_backend=\"wasm_js\""]

# use when hotpatching
[target.x86_64-unknown-linux-gnu]
linker = "clang"
rustflags = ["-C", "link-arg=-fuse-ld=lld"]
# [unstable]
# codegen-backend = true

# [profile]
# incremental = true

# [profile.dev]
# codegen-backend = "cranelift"
# debug = false

# # Consider compiling deps with cranelift if you want cold-compilation to be faster
# [profile.dev.package."*"]
# codegen-backend = "llvm"

# # cranelift is `panic = abort`, so you need to compile with llvm to get `#[should_panic]` working
# [profile.test.package."*"]
# codegen-backend = "llvm"

# # Disable cranelift for release profile
# [profile.release]
# codegen-backend = "llvm"

# # cranelift cannot build wasm32-unknown-unknown out of the box
# [profile.web]
# codegen-backend = "llvm"

# [build]
# rustc-wrapper = "/home/main/.cargo/bin/sccache"
# # Using a global target dir allows all projects to share incremental compilation results,
# # vastly speeding up cold-compilation of new projects.
# target-dir = "/home/main/.cargo/global-target"

# [target.x86_64-unknown-linux-gnu]
# # Note: make sure you've installed dioxus CLI with
# # cargo install dioxus-cli --git https://github.com/laundmo/dioxus --branch=subsecond-fuse-ld
# # otherwise linker= and link-arg=-fuse-ld= won't work
# # linker = "clang"
# # rustflags = [
# #     "-C",
# #     "link-arg=-fuse-ld=mold",
# #     # Nightly
# #     "-Zshare-generics=y",
# #     "-Zthreads=8",
# # ]
# linker = "clang"
# rustflags = ["-C", "link-arg=-fuse-ld=lld"]
# # rustdocflags = [
# #     "-C",
# #     "link-arg=-fuse-ld=mold",
# #     # Nightly
# #     "-Zshare-generics=y",
# #     "-Zthreads=8",
# # ]
